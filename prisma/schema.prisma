// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  nom            String
  prenom         String
  telephone      String?
  photo          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  professeur     Professeur?
  admin          Admin?
  passwordResets PasswordReset[]
  logs           Log[]
}

model Professeur {
  id                 String               @id @default(uuid())
  userId             String               @unique
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade delete
  type               String
  matieresProfesseurs MatieresProfesseurs[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Matiere {
  id                 String               @id @default(uuid())
  nom                String               @unique
  matieresProfesseurs MatieresProfesseurs[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model MatieresProfesseurs {
  id           String    @id @default(uuid())
  professeurId String
  matiereId    String
  professeur   Professeur @relation(fields: [professeurId], references: [id], onDelete: Cascade)
  matiere      Matiere    @relation(fields: [matiereId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([professeurId, matiereId])
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Log {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  action     String
  details    String?
  createdAt  DateTime @default(now())
}